version: '3.4'
volumes:
    # A named volume to share data between containers
    elmclient-build:
        external: false
    yelukerest-letsencrypt:
        external: true
    yelukerest-redis-data:
        external: true
services:
    redis:
        image: redis:6.0.9-alpine
        command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes
        volumes:
            - yelukerest-redis-data:/data
    elmclient:
        build: elmclient
        # Set the location where docker will put our files
        working_dir: /opt/app
        environment:
            - DEVELOPMENT=${DEVELOPMENT}
            - PIAZZA_URL=${ELMCLIENT_PIAZZA_URL}
            - ABOUT_URL=${ELMCLIENT_ABOUT_URL}
            - CANVAS_URL=${ELMCLIENT_CANVAS_URL}
            - SLACK_URL=${ELMCLIENT_SLACK_URL}
            - COURSE_TITLE=${ELMCLIENT_COURSE_TITLE}
        volumes:
            # Note that the package.json-like files were moved into the
            # container as specified by the elmclient/Dockerfile.
            - elmclient-build:/opt/app/dist
            - './elmclient/src:/opt/app/src'
            - './elmclient/run.sh:/opt/app/run.sh'
            - './elmclient/webpack.config.js:/opt/app/webpack.config.js'
        entrypoint: '/opt/app/run.sh'

    # PostgREST instance, is responsible for communicating with the database
    # and providing a REST api, (almost) every request that is sent to the database goes through it
    postgrest:
        image: postgrest/postgrest:v7.0.1
        ports:
            - '127.0.0.1:3000:${POSTGREST_PORT}'
        links:
            - db:db
        environment:
            - PGRST_DB_URI=postgres://${DB_USER}:${DB_PASS}@${DB_HOST}:${DB_PORT}/${DB_NAME}
            - PGRST_DB_SCHEMA=${DB_SCHEMA}
            - PGRST_DB_ANON_ROLE=${DB_ANON_ROLE}
            - PGRST_DB_POOL=${DB_POOL}
            - PGRST_JWT_SECRET=${JWT_SECRET}
            - PGRST_MAX_ROWS=${MAX_ROWS}
            - PGRST_PRE_REQUEST=${PRE_REQUEST}
            - PGRST_SERVER_PROXY_URI=${SERVER_PROXY_URI}

    certbot:
        image: certbot/dns-route53:v1.12.0
        entrypoint: /entrypoint.sh
        volumes:
            - yelukerest-letsencrypt:/etc/letsencrypt/
            - './certbot/entrypoint.sh:/entrypoint.sh'
        environment:
            - AWS_ACCESS_KEY_ID=${CERTBOT_AWS_ACCESS_KEY_ID}
            - AWS_SECRET_ACCESS_KEY=${CERTBOT_AWS_SECRET_ACCESS_KEY}

    # OpenResty (Nginx + Lua) instance that sits in front of PostgREST.
    # All the requests comming into the system are first hitting this component.
    # After some processing/checks and transformation, the request is forwarded
    # to PostgREST down the stack.
    openresty:
        image: openresty/openresty:1.19.3.1-2-buster
        ports:
            - '${OPENRESTY_LISTEN_HOST}:80:80'
            - '${OPENRESTY_LISTEN_HOST}:443:443'
        links:
            - postgrest:postgrest
            - sse:sse
            - certbot:certbot
            - redis:redis
        entrypoint: /entrypoint.sh
        restart: on-failure
        environment:
            - DEVELOPMENT=${DEVELOPMENT}
            - FQDN=${FQDN}
            - NAKED_FQDN=${NAKED_FQDN}
            - POSTGREST_HOST=${POSTGREST_HOST}
            - POSTGREST_PORT=${POSTGREST_PORT}
            - AUTHAPP_JWT=${AUTHAPP_JWT}
            - ELMCLIENT_HOST=${ELMCLIENT_HOST}
            - ELMCLIENT_PORT=${ELMCLIENT_PORT}
            - SHAREDTERMINAL_PORT=${SHAREDTERMINAL_PORT}
            - SHAREDTERMINAL_HOST=${SHAREDTERMINAL_HOST}
            - SWAGGER_JWT=${SWAGGER_JWT}
            - SWAGGER_INFO_TITLE=${SWAGGER_INFO_TITLE}
            - SWAGGER_INFO_DESCRIPTION=${SWAGGER_INFO_DESCRIPTION}
            - SSE_HOST=${SSE_HOST}
            - SSE_PORT=${SSE_PORT}
            - JWT_SECRET=${JWT_SECRET}
            - AUTHAPP_CAS_URI=${AUTHAPP_CAS_URI}
            - REDIS_PASSWORD=${REDIS_PASSWORD}
            - OPENRESTY_SESSION_SECRET=${OPENRESTY_SESSION_SECRET}
        volumes:
            - elmclient-build:/var/elmclient/
            - yelukerest-letsencrypt:/etc/letsencrypt/
            - './openresty/entrypoint.sh:/entrypoint.sh'
            - './openresty/nginx/conf/nginx.conf:/usr/local/openresty/nginx/conf/nginx.conf.tmpl'
            - './openresty/nginx/conf/dhparam.pem:/usr/local/openresty/nginx/conf/dhparam.pem'
            - './openresty/nginx/conf/includes:/usr/local/openresty/nginx/conf/includes'
            - './openresty/nginx/html:/usr/local/openresty/nginx/html'
            - './openresty/lualib/user_code:/usr/local/openresty/lualib/user_code'

    # pg-amqp-bridge instance is responsible for forwarding NOTIFY events in PostgreSQL
    # to RabbitMQ based on the BRIDGE_CHANNELS configuration
    pg_amqp_bridge:
        image: subzerocloud/pg-amqp-bridge:0.0.6
        links:
            - db
            - rabbitmq
        environment:
            - RUST_LOG=info # output forwarded messages
            - POSTGRESQL_URI=postgres://${DB_USER}:${DB_PASS}@${DB_HOST}:${DB_PORT}/${DB_NAME}
            - AMQP_URI=amqp://${RABBITMQ_DEFAULT_USER}:${RABBITMQ_DEFAULT_PASS}@rabbitmq//
            - BRIDGE_CHANNELS=events:amq.topic

    # RabbitMQ instance can be used to consolidate events that originated in your database/application.
    # You can connect here with different consumers and take actions based on those events (like sending signup emails)
    rabbitmq:
        image: rabbitmq:3.8.3
        ports:
            - '127.0.0.1:5671:5671'
            - '127.0.0.1:5672:5672'
            - '127.0.0.1:15672:15672'
        environment:
            - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
            - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
    sse:
        build: sse
        ports:
            - '127.0.0.1:${SSE_HOST_PORT}:${SSE_PORT}'
        links:
            - db
            - rabbitmq
        environment:
            - DEVELOPMENT=${DEVELOPMENT}
            - PORT=${SSE_PORT}
            - AMQP_URI=amqp://${RABBITMQ_DEFAULT_USER}:${RABBITMQ_DEFAULT_PASS}@rabbitmq//
