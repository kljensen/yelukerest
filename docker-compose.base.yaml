version: '3.4'
volumes:
    # A named volume to share data between containers
    elmclient-build:
        external: false
    yelukerest-redis-data:
        external: true
    caddy_data:
    caddy_config:
services:
    redis:
        image: redis:6.0.9-alpine
        command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes
        volumes:
            - yelukerest-redis-data:/data
    elmclient:
        build: elmclient
        # Set the location where docker will put our files
        working_dir: /opt/app
        environment:
            - DEVELOPMENT=${DEVELOPMENT}
            - PIAZZA_URL=${ELMCLIENT_PIAZZA_URL}
            - ABOUT_URL=${ELMCLIENT_ABOUT_URL}
            - CANVAS_URL=${ELMCLIENT_CANVAS_URL}
            - SLACK_URL=${ELMCLIENT_SLACK_URL}
            - COURSE_TITLE=${ELMCLIENT_COURSE_TITLE}
        volumes:
            # Note that the package.json-like files were moved into the
            # container as specified by the elmclient/Dockerfile.
            - elmclient-build:/opt/app/dist
            - './elmclient/src:/opt/app/src'
            - './elmclient/run.sh:/opt/app/run.sh'
            - './elmclient/webpack.config.js:/opt/app/webpack.config.js'
        entrypoint: '/opt/app/run.sh'

    # PostgREST instance, is responsible for communicating with the database
    # and providing a REST api, (almost) every request that is sent to the database goes through it
    postgrest:
        image: postgrest/postgrest:v9.0.1
        ports:
            - '127.0.0.1:3000:${POSTGREST_PORT}'
        links:
            - db:db
        environment:
            - PGRST_DB_URI=postgres://${DB_USER}:${DB_PASS}@${DB_HOST}:${DB_PORT}/${DB_NAME}
            - PGRST_DB_SCHEMA=${DB_SCHEMA}
            - PGRST_DB_ANON_ROLE=${DB_ANON_ROLE}
            - PGRST_DB_POOL=${DB_POOL}
            - PGRST_JWT_SECRET=${JWT_SECRET}
            - PGRST_MAX_ROWS=${MAX_ROWS}
            - PGRST_PRE_REQUEST=${PRE_REQUEST}
            - PGRST_SERVER_PROXY_URI=${SERVER_PROXY_URI}
            - PGRST_LOG_LEVEL=${PGRST_LOG_LEVEL:-error}

    # Caddy instance that sits in front of PostgREST.
    # All the requests coming into the system are first hitting this component.
    # After some processing/checks and transformation, the request is forwarded
    # to PostgREST down the stack.
    caddy:
        build: caddy
        ports:
            - '${CADDY_LISTEN_HOST}:80:80'
            - '${CADDY_LISTEN_HOST}:443:443'
            - '${CADDY_LISTEN_HOST}:443:443/udp'
        links:
            - postgrest:postgrest
            - sse:sse
            - redis:redis
            - authapp:authapp
        restart: on-failure
        environment:
            - FQDN=${FQDN}
            - CADDY_ENV=${CADDY_ENV:-production}
            - NAKED_FQDN=${NAKED_FQDN}
            - POSTGREST_PORT=${POSTGREST_PORT}
            - AUTHAPP_PORT=${AUTHAPP_PORT}
            - SSE_PORT=${SSE_PORT}
            - AWS_ACCESS_KEY_ID=${CADDY_ACME_ACCESS_KEY_ID}
            - AWS_SECRET_ACCESS_KEY=${CADDY_ACME_SECRET_ACCESS_KEY}
            - AWS_REGION=${CADDY_ACME_AWS_REGION}

        volumes:
            - elmclient-build:/var/elmclient/
            - './caddy/Caddyfile:/etc/caddy/Caddyfile'
            - './caddy/development.caddyfile:/etc/caddy/development.caddyfile'
            - './caddy/production.caddyfile:/etc/caddy/production.caddyfile'
            - './caddy/html:/usr/share/caddy/html'
            - './caddy/user_code:/usr/share/caddy/user_code'
            - caddy_data:/data
            - caddy_config:/config

    # pg-amqp-bridge instance is responsible for forwarding NOTIFY events in PostgreSQL
    # to RabbitMQ based on the BRIDGE_CHANNELS configuration. This was originally
    # from subzerocloud
    pg_amqp_bridge:
        build: pg-amqp-bridge
        links:
            - db
            - rabbitmq
        environment:
            - RUST_LOG=info # output forwarded messages
            - POSTGRESQL_URI=postgres://${DB_USER}:${DB_PASS}@${DB_HOST}:${DB_PORT}/${DB_NAME}
            - AMQP_URI=amqp://${RABBITMQ_DEFAULT_USER}:${RABBITMQ_DEFAULT_PASS}@rabbitmq//
            - BRIDGE_CHANNELS=events:amq.topic

    # RabbitMQ instance can be used to consolidate events that originated in your database/application.
    # You can connect here with different consumers and take actions based on those events (like sending signup emails)
    rabbitmq:
        image: rabbitmq:3.8.3
        ports:
            - '127.0.0.1:5671:5671'
            - '127.0.0.1:5672:5672'
            - '127.0.0.1:15672:15672'
        environment:
            - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
            - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
    authapp:
        build: authapp
        ports:
            - '127.0.0.1:${AUTHAPP_HOST_PORT}:${AUTHAPP_PORT}'
        environment:
            - DEVELOPMENT=${DEVELOPMENT}
            - PORT=${AUTHAPP_PORT}
            - CAS_URI=${AUTHAPP_CAS_URI}
            - CAS_VALIDATION_URI=${AUTHAPP_CAS_VALIDATION_URI}
            - POSTGREST_HOST=${POSTGREST_HOST}
            - POSTGREST_PORT=${POSTGREST_PORT}
            - AUTHAPP_JWT=${AUTHAPP_JWT}
    sse:
        build: sse
        ports:
            - '127.0.0.1:${SSE_HOST_PORT}:${SSE_PORT}'
        links:
            - db
            - rabbitmq
        environment:
            - DEVELOPMENT=${DEVELOPMENT}
            - PORT=${SSE_PORT}
            - AMQP_URI=amqp://${RABBITMQ_DEFAULT_USER}:${RABBITMQ_DEFAULT_PASS}@rabbitmq//
