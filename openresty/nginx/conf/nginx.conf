include includes/globals/*.conf;

worker_processes    auto;

# See https://geekflare.com/nginx-production-configuration/
events {
    use                 epoll;
}

http {
    include includes/http/*.conf;
    include mime.types;
    default_type application/octet-stream;

    # Use the built-in Docker DNS resolver
    # resolver 127.0.0.11 ipv6=off;
    resolver 127.0.0.11 ipv6=off;
    resolver_timeout 5s; # Default is 30s, which is way long
    
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    types_hash_max_size 2048;
    server_tokens off;
    # See https://github.com/openresty/headers-more-nginx-module#readme,
    # which is bundled with openresty https://openresty.org/en/components.html
    more_set_headers 'Server:';

    # BEGIN Some hardening
    client_body_buffer_size  1K;
    client_header_buffer_size 1k;
    client_max_body_size 10k; # Could need to increase this if need file uploads
    large_client_header_buffers 2 1k;

    client_body_timeout 10;
    client_header_timeout 10;
    # Keepalive is zero by default and we'll increase it
    # for different servers
    keepalive_timeout 0;
    send_timeout 10;


    #
    # Allow the server to close the connection after a client stops
    # responding.
    # Frees up socket-associated memory.
    # See https://gist.github.com/v0lkan/90fcb83c86918732b894
    reset_timedout_connection on;

    # END Some hardening

    # Hide upstream proxy headers, if any
    proxy_hide_header X-Powered-By;

    # For websockets
    map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
    }

    ##
    # Gzip Settings
    ##
    gzip on;
    gzip_disable "msie6";
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    gzip_min_length    256;
    gzip_types text/plain text/css application/json application/vnd.pgrst.object+json application/x-javascript text/xml application/xml application/xml+rss text/javascript;

    ##
    # SSL Settings, most of this is from https://ssl-config.mozilla.org/ and
    # some from https://gist.github.com/nrollr/9a39bb636a820fb97eec2ed85e473d38
    # and some from https://michael.lustfield.net/nginx/getting-a-perfect-ssl-labs-score
    ##

    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers on;

    # RFC-7919 recommended: https://wiki.mozilla.org/Security/Server_Side_TLS#ffdhe4096
    ssl_dhparam /usr/local/openresty/nginx/conf/dhparam.pem;
    ssl_ecdh_curve secp521r1:secp384r1;

    # enable session resumption to improve https performance
    # http://vincent.bernat.im/en/blog/2011-ssl-session-reuse-rfc5077.html
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 1d;
    ssl_session_tickets off;

    # HSTS (ngx_http_headers_module is required) (63072000 seconds)
    add_header Strict-Transport-Security "max-age=63072000" always;

    # ref: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options
    add_header X-Frame-Options DENY always;

    # ref: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Content-Type-Options
    add_header X-Content-Type-Options nosniff always;

    # ref: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-XSS-Protection
    add_header X-Xss-Protection "1; mode=block" always;

    # OCSP stapling
    ssl_stapling on;
    ssl_stapling_verify on;
    #ssl_trusted_certificate /etc/letsencrypt/live/${FQDN}/fullchain.pem;
    ssl_trusted_certificate /etc/ssl/certs/ca-certificates.crt;
    #lua_ssl_trusted_certificate /etc/letsencrypt/live/${FQDN}/fullchain.pem;
    lua_ssl_trusted_certificate /etc/ssl/certs/ca-certificates.crt;
    lua_ssl_verify_depth 4;

    ${NGINX_HTTP_DEV_INCLUDES}

    # Set up session store
    lua_shared_dict sessions 10m;

    # Shared dict for banned ip addresses used by out web application firewall (waf.lua)
    lua_shared_dict banned_ips 2m;

    # Rate limit number of requests and bandwidth.
    # See https://docs.nginx.com/nginx/admin-guide/security-controls/controlling-access-proxied-http/#limit_req_burst
    limit_req_zone $binary_remote_addr zone=req_limit_zone:10m rate=25r/s;
    limit_conn_zone $binary_remote_addr zone=bandwidth_limit_zone:10m;

    upstream certbot {
        server certbot;
    }

    
    # Add a default server that will result in a 444
    # response if we don't recognize the HOST of the
    # request.
    server {
      listen 80 default_server;

      access_by_lua_file '../lualib/user_code/waf-access.lua';
      location / {
          # Ban IPs that hit our default server. See also waf.conf
          content_by_lua_block {
              require('waf').ban(600, ngx.HTTP_CLOSE)
          }
      }
    }


    # HTTP server
    server {
        listen 80;
        server_name ${FQDN};
        access_by_lua_file '../lualib/user_code/waf-access.lua';

        location /.well-known {
            proxy_pass http://certbot;
        }

        location / {
            content_by_lua_block {
                return ngx.redirect("https://" .. ngx.var.host .. ngx.var.request_uri, 302)
            }
        }
    }

    # HTTPS server
    server {
        #expose external env vars as internal nginx variables
        listen 443 ssl http2;

        server_name ${FQDN};
        charset utf-8;
        uninitialized_variable_warn off;

        ssl_certificate /etc/letsencrypt/live/${FQDN}/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/${FQDN}/privkey.pem;
        
        access_log logs/access.log combined;

        # Use redis for sessions
        # https://github.com/bungle/lua-resty-session
        set $session_storage redis;
        set $session_redis_host redis;
        set $session_redis_auth ${REDIS_PASSWORD};
        set $session_secret ${OPENRESTY_SESSION_SECRET};

        #
        # I believe this strategy is better for js-heavy applications
        # with many async requesets, as our elmclient has.
        set $session_strategy regenerate;
        # Persist cookies between browser sessions
        set $session_cookie_persistent on;
        # Expire cookies after 1wk, or 604800s
        set $session_cookie_lifetime 604800;
        # Renew cookies after an hour
        set $session_cookie_renew      3600;

        # Rate limit connections. Limit to 5 concurrent connections
        # and throttle bandwidth after 1m of traffic.
        # See https://docs.nginx.com/nginx/admin-guide/security-controls/controlling-access-proxied-http/#limit_req_burst
        limit_req zone=req_limit_zone burst=50 delay=25;
        limit_conn bandwidth_limit_zone 25;
        limit_rate_after 1m;
        limit_rate       50k;

        # Set a reasonable keepalive
        keepalive_timeout 75 60;

        # I use this robots.txt in order to create a honeypot
        # for bots at /admin
        location = /robots.txt {
           add_header Content-Type text/plain;
           return 200 "User-agent: *\nDisallow: /admin\n";
        }

        location /.well-known {
	        proxy_pass http://certbot;
        }

        access_by_lua_file '../lualib/user_code/waf-access.lua';

        include includes/http/server/*.conf;
        ${NGINX_SERVER_DEV_INCLUDES}
    }

}
