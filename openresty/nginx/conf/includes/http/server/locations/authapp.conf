

location /auth/ {
    # MIME type determined by default_type:
    default_type 'text/html';

    # We're only allowing GET requests
    limit_except GET {
        deny  all;
    }

    # We are going to 
    set $session_cookie_path /auth/;
    # Allow cookies to persist after the browser is closed
    set $session_cookie_persistent on;
    # Cookies expire in 1 week
    set $session_cookie_renew 604800;

    # The purpose of this route is to get authorized users 
    # a session cookie. If they don't have a valid session
    # cookie when they visit, they will be redirected to a
    # CAS server for authentication. The session cookie is
    # scoped to this path so that the cookie is not sent 
    # during other requests that their browser makes. 
    location /auth/login {
        access_by_lua_block {
            require('cas').force_authentication()
        }
        content_by_lua_block {
            require('cas').redirect_to_next()
        }
    }
    location /auth/logout {
        content_by_lua_block{
            local cas = require('cas')
            cas.logout()
            ngx.say('You are logged out')
        }
    }
    location /auth/jwt {
        access_by_lua_block {
            require('cas').require_authentication()
        }
        content_by_lua_block{
            local authapp = require('authapp')
            authapp.get_jwt(ngx.ctx.netid)
        }
    }
    location /auth/me {
        access_by_lua_block {
            require('cas').require_authentication()
        }
        content_by_lua_block{
            local authapp = require('authapp')
            authapp.get_me(ngx.ctx.netid)
        }
    }

    # Return postgrest's built-in openapi specification
    # so that it can be rendered in a pretty webpage by
    # the swagger-ui. This location block is put here
    # under the /auth scope because that is the scope of
    # our session cookie.
    location = /auth/api.json {
        default_type 'text/plain';

        content_by_lua_block {
            local openapi = require("openapi");
            local session, netid, jwt, ni = openapi.get_jwt_from_session_cookie()
            openapi.print_openapi_spec(jwt)
        }
    }

    location /auth/api2.json {
        default_type 'text/plain';
        content_by_lua_block {
            local cjson = require "cjson"

            local function not_empty(s)
                return s ~= nil and s ~= ''
            end
            function all_trim(s)
                return s:match( "^'*(.-)'*$" )
            end

            local swagger_jwt = os.getenv('SWAGGER_JWT')
            if not_empty(swagger_jwt) then
                ngx.req.set_header("Authorization", "Bearer "..swagger_jwt)
            end

            local res = ngx.location.capture("/rest/")
            if res then
                local api_data = cjson.decode(res.body)
                local swagger_info_title = os.getenv('SWAGGER_INFO_TITLE')
                local swagger_info_description = os.getenv('SWAGGER_INFO_DESCRIPTION')
                if api_data.info then
                    if not_empty(swagger_info_title) then
                        api_data.info.title = all_trim(swagger_info_title, '\'')
                    end
                    if not_empty(swagger_info_description) then
                        api_data.info.description = all_trim(swagger_info_description, '\'')
                    end
                end

                local output = cjson.encode(api_data)
                ngx.print(output)
            end
        }
    }
}